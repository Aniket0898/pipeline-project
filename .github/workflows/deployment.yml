name: Deploy to ECS

on:
  push:
    branches:
      - main

env:
  TF_BACKEND_BUCKET: my-terraform-state-bucket
  TF_BACKEND_KEY: my-terraform-state-key
  AWS_REGION: ap-south-1
  ECR_REPOSITORY_NAME: demo-app
  ECS_CLUSTER_NAME: demo-app
  ECS_SERVICE_NAME: demo-app-service

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          backend-config: |
            bucket = "${{ env.TF_BACKEND_BUCKET }}"
            key    = "${{ env.TF_BACKEND_KEY }}"
            region = "${{ env.AWS_REGION }}"
      - name: Terraform Init
        run: terraform init

      - name: Terraform Destroy
        run: terraform destroy
        
      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve

      - name: Login to ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build and push Docker image to ECR
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-ecr-repo:${{ github.sha }}
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_TOKEN: ${{ steps.ecr-login.outputs.authorizationToken }}

      - name: Get latest image URI from ECR
        id: get_latest_image
        run: |
          IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY_NAME}}:latest"
          echo "::set-output name=image_uri::${IMAGE_URI}"
      - name: Update ECS service with latest image
        run: |
          aws ecs update-service --cluster "${ECS_CLUSTER_NAME}" --service "${ECS_SERVICE_NAME}" --force-new-deployment --task-definition "{
            \"containerDefinitions\": [
              {
                \"name\": \"my-container\",
                \"image\": \"${{ steps.get_latest_image.outputs.image_uri }}\",
                \"essential\": true,
                \"portMappings\": [
                  {
                    \"containerPort\": 80,
                    \"protocol\": \"tcp\"
                  }
                ]
              }
            ],
            \"executionRoleArn\": \"arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole\",
            \"family\": \"my-task-family\",
            \"networkMode\": \"awsvpc\",
            \"taskRoleArn\": \"arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/my-task-role\"
          }"
