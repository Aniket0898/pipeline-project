name: Deploy to ECS

on:
  push:
    branches:
      - main

env:
  TF_BACKEND_BUCKET: my-terraform-state-bucket
  TF_BACKEND_KEY: my-terraform-state-key
  AWS_REGION: ap-south-1
  ECR_REPOSITORY_NAME: demo-app
  ECS_CLUSTER_NAME: demo-app
  ECS_SERVICE_NAME: demo-app-service

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          backend-config: |
            bucket = "${{ env.TF_BACKEND_BUCKET }}"
            key    = "${{ env.TF_BACKEND_KEY }}"
            region = "${{ env.AWS_REGION }}"

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build and Push Docker image
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG

      - name: Create or update ECS service
        uses: marvinpinto/action-ecs-deploy@v0.2.2
        with:
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          service: ${{ env.ECS_SERVICE_NAME }}
          task_definition: |
            {
              "family": "demo-app",
              "containerDefinitions": [
                {
                  "name": "demo-app-container",
                  "image": "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY_NAME }}:${{ github.sha }}",
                  "essential": true,
                  "portMappings": [
                    {
                      "containerPort": 3000
                    }
                  ]
                }
              ]
            }
          wait-for-service-stable: true
          log-group-name: /ecs/${{ env.ECS_SERVICE_NAME }}
