name: Deploy to ECS

on:
  push:
    branches:
      - main

env:
  TF_BACKEND_BUCKET: my-terraform-state-bucket
  TF_BACKEND_KEY: my-terraform-state-key
  ECR_REPOSITORY_NAME: demo_app
  ECS_CLUSTER_NAME: demo_app
  ECS_SERVICE_NAME: app_service
  ECS_TD: .github/workflows/taskdefinition.json
  CONTAINER_NAME: demo_container
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  IMAGE_TAG: latest

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          backend-config: |
            bucket = "${{ env.TF_BACKEND_BUCKET }}"
            key    = "${{ env.TF_BACKEND_KEY }}"
            region = "${{ env.AWS_REGION }}"
      - name: Terraform Init
        run: terraform init

      - name: Terraform Destroy
        run: terraform destroy
        
      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Login to ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        id: build-image
        env:
          ECR_REGISTRY: "${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com"
        uses: docker/build-push-action@v2 
        with:
          context: .
          push: true
          tags: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/demo_app:${{ github.sha }}
          
      - name: Get latest image URI from ECR
        id: get_latest_image
        run: |
          IMAGE_URI="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY_NAME}}:${{ github.sha }}"
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY_NAME:${{ github.sha }}""
          
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TD }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY_NAME:${{ github.sha }}"
          
      - name: Replace AWS_ACCOUNT_ID in task definition
        run: sed -i "s/\\*\\*\\*/${{ env.AWS_ACCOUNT_ID }}/g" .github/workflows/taskdefinition.json
        

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.register-task.outputs.task-definition-arn }}
          service: ${{ env.ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true
